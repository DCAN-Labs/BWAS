function [paths, ids, visit_folder, pipeline, full_path] = read_participants_and_paths(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as column vectors.
%   VARNAME2 = IMPORTFILE(FILENAME) Reads data from text file FILENAME for
%   the default selection.
%
%   VARNAME2 = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from rows
%   STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   VarName2 = importfile('ADHD_participants.txt',1, 582);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2015/07/17 16:41:13

%% Initialize variables.
delimiter = '';
if nargin<=2
    startRow = 1;
    endRow = inf;
end

%% Format string for each line of text:
%   column1: text (%s)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(1)-1, 'ReturnOnError', false);
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(block)-1, 'ReturnOnError', false);
    dataArray{1} = [dataArray{1};dataArrayBlock{1}];
end

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Allocate imported array to column variable names
VarName2 = dataArray{:, 1};

all_names=char(VarName2);
full_path=all_names;
n=size(all_names,1);
paths=cell(n,1);
ids=cell(n,1);
visit_folder=cell(n,1);
pipeline=cell(n,1);


% expression = '/';
expression = filesep;

for i=1:n
    str = strtrim(all_names(i,:));
    splitStr = regexp(str,expression,'split');
    for j=1:length(splitStr)-3
        if ~isempty(splitStr{j})
%             paths{i}=[paths{i} '/' splitStr{j}];
            paths{i}=[paths{i} expression splitStr{j}];
        end
    end
%     ids{i}=splitStr{end-2};
%     visit_folder{i}=splitStr{end-1};
%     pipeline{i}=splitStr{end};
    
    
    ids{i}=splitStr{end-1};
    visit_folder{i}=splitStr{end};
    pipeline{i}=splitStr{end-2};
end
