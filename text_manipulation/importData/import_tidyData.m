function tidyData = import_tidyData(Dictionary,tidyData_filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as a matrix.
%   CATRESULTS = IMPORTFILE(FILENAME) Reads data from text file FILENAME
%   for the default selection.
%
%   CATRESULTS = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from
%   rows STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   catresults = importfile('cat_results.csv', 2, 81);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2018/11/16 10:16:21
% HACKED by Oscar Miranda to make it work for any number of colums

%% Initialize variables.
delimiter = ',';
if nargin<=2
    startRow = 1;
    endRow = inf;
end

%% hacked to take multiple column number as input

delimiter = ',';
fid = fopen(tidyData_filename,'rt');
tLines = fgets(fid);
numCols = numel(strfind(tLines,delimiter)) + 1;
fclose(fid);
formatSpec=repmat('%s',1,numCols);
formatSpec=[formatSpec '%[^\n\r]'];


%% Open the text file.
fileID = fopen(tidyData_filename,'r');
%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = mat2cell(dataArray{col}, ones(length(dataArray{col}), 1));
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

numRows=size(dataArray{1},1);
for col=1:numCols
    % Converts text in the input cell array to numbers. Replaced non-numeric
    % text with NaN.
    rawData = dataArray{col};
    for row=1:numRows
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        %         regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        %         try
        %             result = regexp(rawData(row), regexstr, 'names');
        %             numbers = result.numbers;
        %
        %             % Detected commas in non-thousand locations.
        %             invalidThousandsSeparator = false;
        %             if numbers.contains(',')
        %                 thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
        %                 if isempty(regexp(numbers, thousandsRegExp, 'once'))
        %                     numbers = NaN;
        %                     invalidThousandsSeparator = true;
        %                 end
        %             end
        %             % Convert numeric text to numbers.
        %             if ~invalidThousandsSeparator
        %                 numbers = textscan(char(strrep(numbers, ',', '')), '%f');
        %                 numericData(row, col) = numbers{1};
        %                 raw{row, col} = numbers{1};
        %             end
        %         catch
        %             raw{row, col} = rawData{row};
        %         end
        raw{row, col} = rawData{row};
    end
end


tidyData=cell2table(raw(2:end,:));

for i=1:numCols
    temp_text=char(table2array(Dictionary(i,1)));
    temp_text(temp_text==' ')='_';
    tidyData.Properties.VariableNames{i}=temp_text;
    if strcmp(char(Dictionary{i,2}),'numeric')
        as_is=tidyData{:,i};
        as_num=str2double(as_is);
        temp_column=table(as_num);
        temp_column.Properties.VariableNames{1}=temp_text;% added
        tidyData(:,i)=[];% added
        
        tidyData=[tidyData(:,1:i-1) temp_column tidyData(:,i:end)];% added
%         for j=1:numRows-1;
%             tidyData{j,i}={temp_column{j,1}};
%         end
    end
end


%% patch added to try to cast alphanumeric as char
is_alphanumeric=ismember(table2array(Dictionary(:,2)),'alphanumeric');
is_alphanumeric=or(is_alphanumeric,ismember(table2array(Dictionary(:,2)),'String'));
new_table=[];
for i=1:size(Dictionary,1)
    if is_alphanumeric(i)
        try
        temp_table=table(char(table2array(tidyData(:,i))));
        temp_table.Properties.VariableNames=tidyData.Properties.VariableNames(i);
        new_table=[new_table temp_table];
        catch
            new_table=[new_table tidyData(:,i)];
        end
    else
        new_table=[new_table tidyData(:,i)];
    end
end
tidyData=new_table;

%%
% for i=2:size(Dictionary,1)
%     Dictionary(i,1)=char(Dictionary{i,1})
% end

